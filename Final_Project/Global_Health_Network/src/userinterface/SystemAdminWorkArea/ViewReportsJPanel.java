/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.EcoSystem;
import java.awt.CardLayout;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.swing.JPanel;
import org.apache.log4j.Logger;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Sumesh
 */
public class ViewReportsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewReportsJPanel
     */
    JPanel userProcessContainer;
    EcoSystem system;
    String[] values;
    String geneValues;
    List<String> networkList;
    List<String> diseaseList;
    List<String> medicineList;
    List<String> geneList;
    private static Logger log = Logger.getLogger(ViewReportsJPanel.class);
    private static final String CLASS_NAME = ViewReportsJPanel.class.getName();
    public ViewReportsJPanel(JPanel userProcessContainer,EcoSystem system) {
        initComponents();
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.system=system;
        this.networkList= new ArrayList<>();
        this.diseaseList= new ArrayList<>();
        this.medicineList= new ArrayList<>();
        this.geneList = new ArrayList<>();
        addMedicines();
        addGenes();
    }

       public void addGenes(){
         try {
            String filePat = "./genes data.txt";
            File file = new File(filePat);
            Scanner input = new Scanner(file);
            
            while(input.hasNext()){
                String data = input.next();
                geneValues = data;
                 geneList.add(geneValues);
                 System.out.println(geneValues);
                }
             
        } catch (FileNotFoundException ex) {
            
            log.error("genes data.txt" +ex);
        }
       
    }
    
    public void addMedicines(){
        try {
            String filePath = "./prescription data.txt";
            File file = new File(filePath);
            Scanner input = new Scanner(file);
            
            while(input.hasNext()){
                String data = input.next();
                 values = data.split(",");
                 networkList.add(values[0].trim());
                 diseaseList.add(values[1].trim());
                 medicineList.add(values[2].trim());
                 System.out.println(values[2]);
                }
           
        } catch (Exception ex) {
            log.error("prescription data.txt not found" +ex);
            
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnTopMedNetwork = new javax.swing.JButton();
        btnMostCommonDisease = new javax.swing.JButton();
        btnMostAffectGene = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        btnBack.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(0, 153, 255));

        jLabel1.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("REPORTS PORTAL");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 7, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        btnTopMedNetwork.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        btnTopMedNetwork.setText("TOP MEDICINE SALES ACROSS NETWORKS");
        btnTopMedNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTopMedNetworkActionPerformed(evt);
            }
        });

        btnMostCommonDisease.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        btnMostCommonDisease.setText("MOST COMMON DISEASES ACROSS NETWORKS");
        btnMostCommonDisease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostCommonDiseaseActionPerformed(evt);
            }
        });

        btnMostAffectGene.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        btnMostAffectGene.setText("MOST AFFECTED GENES");
        btnMostAffectGene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostAffectGeneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnMostCommonDisease, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE)
                    .addComponent(btnTopMedNetwork, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMostAffectGene, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(105, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(btnTopMedNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnMostCommonDisease, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnMostAffectGene, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTopMedNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTopMedNetworkActionPerformed
        // TODO add your handling code here:
        DefaultCategoryDataset dcd= new DefaultCategoryDataset();
        int Galafold=0,Onpattro=0,Revcovi=0,Tegsedi=0,Haegarda=0,Brineura=0,Mepsevii=0,Spinraza=0;
        int Galafold1=0,Onpattro1=0,Revcovi1=0,Tegsedi1=0,Haegarda1=0,Brineura1=0,Mepsevii1=0,Spinraza1=0;
        int Galafold2=0,Onpattro2=0,Revcovi2=0,Tegsedi2=0,Haegarda2=0,Brineura2=0,Mepsevii2=0,Spinraza2=0;
         
         for(int i=0;i<medicineList.size();i++){
           String network = networkList.get(i); 
           String disease = diseaseList.get(i);
           String medicine = medicineList.get(i);
           
           if((network.equalsIgnoreCase("India")) && medicine.equalsIgnoreCase("Galafold")){
              Galafold++;
             }
           if((network.equalsIgnoreCase("India")) && medicine.equalsIgnoreCase("Onpattro")){
              Onpattro++;
             }
           if((network.equalsIgnoreCase("India")) && medicine.equalsIgnoreCase("Revcovi")){
              Revcovi++;
             }
           if((network.equalsIgnoreCase("India")) && medicine.equalsIgnoreCase("Tegsedi")){
              Tegsedi++;
             }
           if((network.equalsIgnoreCase("India")) && medicine.equalsIgnoreCase("Haegarda")){
              Haegarda++;
             }
           if((network.equalsIgnoreCase("India")) && medicine.equalsIgnoreCase("Brineura")){
              Brineura++;
             }
           if((network.equalsIgnoreCase("India")) && medicine.equalsIgnoreCase("Mepsevii")){
              Mepsevii++;
             }
           if((network.equalsIgnoreCase("India")) && medicine.equalsIgnoreCase("Spinraza")){
              Spinraza++;
             }
           
            }
         dcd.setValue(Galafold, "India", "Galafold");
         dcd.setValue(Onpattro, "India", "Onpattro");
         dcd.setValue(Revcovi, "India", "Revcovi");
         dcd.setValue(Tegsedi, "India", "Tegsedi");
         dcd.setValue(Haegarda, "India", "Haegarda");
         dcd.setValue(Brineura, "India", "Brineura");
         dcd.setValue(Mepsevii, "India", "Mepsevii");
         dcd.setValue(Spinraza, "India", "Spinraza");
         
       JFreeChart jchart = ChartFactory.createBarChart("Top Medicines By Sales", "Networks", "Sales", dcd, PlotOrientation.VERTICAL, true, true, false);
       
       CategoryPlot plot = jchart.getCategoryPlot();
       plot.setRangeGridlinePaint(Color.BLACK);
       
       
       ChartFrame chartFrame = new ChartFrame("Medicines",jchart,true);
       chartFrame.setVisible(true);
       chartFrame.setSize(2000,1000); 
       
       
       for(int i=0;i<medicineList.size();i++){
           String network = networkList.get(i);
           String disease = diseaseList.get(i);           
           String medicine = medicineList.get(i);
           
           if((network.equalsIgnoreCase("Russia")) && medicine.equalsIgnoreCase("Galafold")){
              Galafold1++;
             }
           if((network.equalsIgnoreCase("Russia")) && medicine.equalsIgnoreCase("Onpattro")){
              Onpattro1++;
             }
           if((network.equalsIgnoreCase("Russia")) && medicine.equalsIgnoreCase("Revcovi")){
              Revcovi1++;
             }
           if((network.equalsIgnoreCase("Russia")) && medicine.equalsIgnoreCase("Tegsedi")){
              Tegsedi1++;
             }
           if((network.equalsIgnoreCase("Russia")) && medicine.equalsIgnoreCase("Haegarda")){
              Haegarda1++;
             }
           if((network.equalsIgnoreCase("Russia")) && medicine.equalsIgnoreCase("Brineura")){
              Brineura1++;
             }
           if((network.equalsIgnoreCase("Russia")) && medicine.equalsIgnoreCase("Mepsevii")){
              Mepsevii1++;
             }
           if((network.equalsIgnoreCase("Russia")) && medicine.equalsIgnoreCase("Spinraza")){
              Spinraza1++;
             }
           
            }
         dcd.setValue(Galafold1, "Russia", "Galafold");
         dcd.setValue(Onpattro1, "Russia", "Onpattro");
         dcd.setValue(Revcovi1, "Russia", "Revcovi");
         dcd.setValue(Tegsedi1, "Russia", "Tegsedi");
         dcd.setValue(Haegarda1, "Russia", "Haegarda");
         dcd.setValue(Brineura1, "Russia", "Brineura");
         dcd.setValue(Mepsevii1, "Russia", "Mepsevii");
         dcd.setValue(Spinraza1, "Russia", "Spinraza");
         
        CategoryPlot plot1 = jchart.getCategoryPlot();
        plot1.setRangeGridlinePaint(Color.BLACK);
        
        for(int i=0;i<medicineList.size();i++){
           String network = networkList.get(i);
           String disease = diseaseList.get(i);
           String medicine = medicineList.get(i);
           
           if((network.equalsIgnoreCase("America")) && medicine.equalsIgnoreCase("Galafold")){
              Galafold2++;
             }
           if((network.equalsIgnoreCase("America")) && medicine.equalsIgnoreCase("Onpattro")){
              Onpattro2++;
             }
           if((network.equalsIgnoreCase("America")) && medicine.equalsIgnoreCase("Revcovi")){
              Revcovi2++;
             }
           if((network.equalsIgnoreCase("America")) && medicine.equalsIgnoreCase("Tegsedi")){
              Tegsedi2++;
             }
           if((network.equalsIgnoreCase("America")) && medicine.equalsIgnoreCase("Haegarda")){
              Haegarda2++;
             }
           if((network.equalsIgnoreCase("America")) && medicine.equalsIgnoreCase("Brineura")){
              Brineura2++;
             }
           if((network.equalsIgnoreCase("America")) && medicine.equalsIgnoreCase("Mepsevii")){
              Mepsevii2++;
             }
           if((network.equalsIgnoreCase("America")) && medicine.equalsIgnoreCase("")){
              Spinraza2++;
             }
           
            }
         dcd.setValue(Galafold2, "America", "Galafold");
         dcd.setValue(Onpattro2, "America", "Onpattro");
         dcd.setValue(Revcovi2, "America", "Revcovi");
         dcd.setValue(Tegsedi2, "America", "Tegsedi");
         dcd.setValue(Haegarda2, "America", "Haegarda");
         dcd.setValue(Brineura2, "America", "Brineura");
         dcd.setValue(Mepsevii2, "America", "Mepsevii");
         dcd.setValue(Spinraza2, "America", "Spinraza");
         
        CategoryPlot plot2 = jchart.getCategoryPlot();
        plot2.setRangeGridlinePaint(Color.BLACK);
    }//GEN-LAST:event_btnTopMedNetworkActionPerformed

    private void btnMostCommonDiseaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostCommonDiseaseActionPerformed
        // TODO add your handling code here:
       DefaultCategoryDataset dcd= new DefaultCategoryDataset();
       int Achondroplasia=0,Marfansyndrome=0,Cysticfibrosis=0,TaySachs=0,Haemophilia=0,Mosaicism=0,Downsyndrome=0,Turnersyndrome=0;
       int Achondroplasia1=0,Marfansyndrome1=0,Cysticfibrosis1=0,TaySachs1=0,Haemophilia1=0,Mosaicism1=0,Downsyndrome1=0,Turnersyndrome1=0;
       int Achondroplasia2=0,Marfansyndrome2=0,Cysticfibrosis2=0,TaySachs2=0,Haemophilia2=0,Mosaicism2=0,Downsyndrome2=0,Turnersyndrome2=0;
       
         for(int i=0;i<medicineList.size();i++){
           String network = networkList.get(i);
           String disease = diseaseList.get(i); 
           String medicine = medicineList.get(i);
           
            if((network.equalsIgnoreCase("India")) && disease.equalsIgnoreCase("Achondroplasia")){
              Achondroplasia++;
             }
           if((network.equalsIgnoreCase("India")) && disease.equalsIgnoreCase("Marfansyndrome")){
              Marfansyndrome++;
             }
           if((network.equalsIgnoreCase("India")) && disease.equalsIgnoreCase("Cysticfibrosis")){
              Cysticfibrosis++;
             }
           if((network.equalsIgnoreCase("India")) && disease.equalsIgnoreCase("TaySachs")){
              TaySachs++;
             }
           if((network.equalsIgnoreCase("India")) && disease.equalsIgnoreCase("Haemophilia")){
              Haemophilia++;
             }
           if((network.equalsIgnoreCase("India")) && disease.equalsIgnoreCase("Mosaicism")){
              Mosaicism++;
             }
           if((network.equalsIgnoreCase("India")) && disease.equalsIgnoreCase("Downsyndrome")){
              Downsyndrome++;
             }
           if((network.equalsIgnoreCase("India")) && disease.equalsIgnoreCase("Turnersyndrome")){
              Turnersyndrome++;
             }
           
            }
         dcd.setValue(Achondroplasia, "India", "Achondroplasia");
         dcd.setValue(Marfansyndrome, "India", "Marfansyndrome");
         dcd.setValue(Cysticfibrosis, "India", "Cysticfibrosis");
         dcd.setValue(TaySachs, "India", "TaySachs");
         dcd.setValue(Haemophilia, "India", "Haemophilia");
         dcd.setValue(Mosaicism, "India", "Mosaicism");
         dcd.setValue(Downsyndrome, "India", "Downsyndrome");
         dcd.setValue(Turnersyndrome, "India", "Turnersyndrome");
         
         
       JFreeChart jchart = ChartFactory.createBarChart("Most common diseases", "Networks", "count", dcd, PlotOrientation.VERTICAL, true, true, false);
       
       CategoryPlot plot = jchart.getCategoryPlot();
       plot.setRangeGridlinePaint(Color.BLACK);
       
       
       ChartFrame chartFrame = new ChartFrame("Medicines",jchart,true);
       chartFrame.setVisible(true);
       chartFrame.setSize(2000,1000); 
       
       
       for(int i=0;i<medicineList.size();i++){
           String network = networkList.get(i);
           String disease = diseaseList.get(i);
           String medicine = medicineList.get(i);
         
           if((network.equalsIgnoreCase("Russia")) && disease.equalsIgnoreCase("Achondroplasia")){
              Achondroplasia1++;
             }
           if((network.equalsIgnoreCase("Russia")) && disease.equalsIgnoreCase("Marfansyndrome")){
              Marfansyndrome1++;
             }
           if((network.equalsIgnoreCase("Russia")) && disease.equalsIgnoreCase("Cysticfibrosis")){
              Cysticfibrosis1++;
             }
           if((network.equalsIgnoreCase("Russia")) && disease.equalsIgnoreCase("TaySachs")){
              TaySachs1++;
             }
           if((network.equalsIgnoreCase("Russia")) && disease.equalsIgnoreCase("Haemophilia")){
              Haemophilia1++;
             }
           if((network.equalsIgnoreCase("Russia")) && disease.equalsIgnoreCase("Mosaicism")){
              Mosaicism1++;
             }
           if((network.equalsIgnoreCase("Russia")) && disease.equalsIgnoreCase("Downsyndrome")){
              Downsyndrome1++;
             }
           if((network.equalsIgnoreCase("Russia")) && disease.equalsIgnoreCase("Turnersyndrome")){
              Turnersyndrome1++;
             }
           
            }
         dcd.setValue(Achondroplasia1, "Russia", "Achondroplasia");
         dcd.setValue(Marfansyndrome1, "Russia", "Marfansyndrome");
         dcd.setValue(Cysticfibrosis1, "Russia", "Cysticfibrosis");
         dcd.setValue(TaySachs1, "Russia", "TaySachs");
         dcd.setValue(Haemophilia1, "Russia", "Haemophilia");
         dcd.setValue(Mosaicism1, "Russia", "Mosaicism");
         dcd.setValue(Downsyndrome1, "Russia", "Downsyndrome");
         dcd.setValue(Turnersyndrome1, "Russia", "Turnersyndrome");
         
        CategoryPlot plot1 = jchart.getCategoryPlot();
        plot1.setRangeGridlinePaint(Color.BLACK);
        
        for(int i=0;i<medicineList.size();i++){
           String network = networkList.get(i);
           String disease = diseaseList.get(i);
           String medicine = medicineList.get(i);           
           
             if((network.equalsIgnoreCase("America")) && disease.equalsIgnoreCase("Achondroplasia")){
              Achondroplasia2++;
             }
           if((network.equalsIgnoreCase("America")) && disease.equalsIgnoreCase("Marfansyndrome")){
              Marfansyndrome2++;
             }
           if((network.equalsIgnoreCase("America")) && disease.equalsIgnoreCase("Cysticfibrosis")){
              Cysticfibrosis2++;
             }
           if((network.equalsIgnoreCase("America")) && disease.equalsIgnoreCase("TaySachs")){
              TaySachs2++;
             }
           if((network.equalsIgnoreCase("America")) && disease.equalsIgnoreCase("Haemophilia")){
              Haemophilia2++;
             }
           if((network.equalsIgnoreCase("America")) && disease.equalsIgnoreCase("Mosaicism")){
              Mosaicism2++;
             }
           if((network.equalsIgnoreCase("America")) && disease.equalsIgnoreCase("Downsyndrome")){
              Downsyndrome2++;
             }
           if((network.equalsIgnoreCase("America")) && disease.equalsIgnoreCase("Turnersyndrome")){
              Turnersyndrome2++;
             }
           
            }
         dcd.setValue(Achondroplasia2, "America", "Achondroplasia");
         dcd.setValue(Marfansyndrome2, "America", "Marfansyndrome");
         dcd.setValue(Cysticfibrosis2, "America", "Cysticfibrosis");
         dcd.setValue(TaySachs2, "America", "TaySachs");
         dcd.setValue(Haemophilia2, "America", "Haemophilia");
         dcd.setValue(Mosaicism2, "America", "Mosaicism");
         dcd.setValue(Downsyndrome2, "America", "Downsyndrome");
         dcd.setValue(Turnersyndrome2, "America", "Turnersyndrome");
         
        CategoryPlot plot2 = jchart.getCategoryPlot();
        plot2.setRangeGridlinePaint(Color.BLACK);
    }//GEN-LAST:event_btnMostCommonDiseaseActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnMostAffectGeneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostAffectGeneActionPerformed
        // TODO add your handling code here:
        DefaultPieDataset dcd = new DefaultPieDataset();
        int A2M=0,BAX=0,CAT=0,DLL3=0,EGF=0,FOS=0,GH1=0,HSF1=0,IGF1=0,LEP=0;
        for(int i=0;i<geneList.size();i++){
           String gene = geneList.get(i);
           
           if(gene.equalsIgnoreCase("A2M")){
              A2M++;
             }
           if(gene.equalsIgnoreCase("BAX")){
              BAX++;
             }
           if(gene.equalsIgnoreCase("CAT")){
              CAT++;
             }
           if(gene.equalsIgnoreCase("DLL3")){
              DLL3++;
             }
           if(gene.equalsIgnoreCase("EGF")){
              EGF++;
             }
           if(gene.equalsIgnoreCase("FOS")){
              FOS++;
             }
           if(gene.equalsIgnoreCase("GH1")){
              GH1++;
             }
           if(gene.equalsIgnoreCase("HSF1")){
              HSF1++;
             }
           if(gene.equalsIgnoreCase("IGF1")){
              IGF1++;
             }
           if(gene.equalsIgnoreCase("LEP")){
              LEP++;
             }
           }
        dcd.setValue("A2M", A2M);
        dcd.setValue("BAX", BAX);
        dcd.setValue("CAT", CAT);
        dcd.setValue("DLL3", DLL3);
        dcd.setValue("EGF", EGF);
        dcd.setValue("FOS", FOS);
        dcd.setValue("GH1", GH1);
        dcd.setValue("HSF1", HSF1);
        dcd.setValue("IGF1", IGF1);
        dcd.setValue("LEP", LEP);
        
        JFreeChart chart = ChartFactory.createPieChart3D("Predominent Gene in Diseases", dcd, true, true,true);
        PiePlot3D plot = (PiePlot3D)chart.getPlot();        
        ChartFrame panel = new ChartFrame("Pie Chart",chart);
        panel.setVisible(true);
        panel.setSize(2000,1000);
    }//GEN-LAST:event_btnMostAffectGeneActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnMostAffectGene;
    private javax.swing.JButton btnMostCommonDisease;
    private javax.swing.JButton btnTopMedNetwork;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
}
