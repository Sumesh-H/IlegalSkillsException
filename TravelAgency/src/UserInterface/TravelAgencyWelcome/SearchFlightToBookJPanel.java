/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.TravelAgencyWelcome;

import Business.Airliner;
import Business.Flight;
import Business.TravelAgency;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author krish
 */
public class SearchFlightToBookJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchFlightToBookJPanel
     */
    private JPanel panel;
    private TravelAgency travelAgency;
    public SearchFlightToBookJPanel(JPanel panel, TravelAgency travelAgency) {
        this.panel=panel;
        this.travelAgency=travelAgency;
        initComponents();
        //backBtn.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        populate();
        populateComboBox();
        
    }
    
    public void populate(){
        DefaultTableModel dtm = (DefaultTableModel)tblSearchFlightList.getModel();
        dtm.setRowCount(0);
//        for(Airliner airliner : travelAgency.getAirlinerDirectory().getAirlinerList()){
//            int i=0;
//            int count = 0;
//            for(Flight flight : airliner.getFlightList()){
//                if(airliner.getAirlinerName().equalsIgnoreCase(flight.getAirlinerName())){
//                    Object[] row = new Object[8];
//                    row[0] = flight;
//                    row[1] = flight.getFlightNumber();
//                    row[2] = flight.getSource(); 
//                    row[3] = flight.getDestination();
//                    row[4] = flight.getDepartureTime();
//                    row[5] = flight.getArrivalTime();
//                    row[6] = flight.getFlightPrice();
//                    row[7] = flight.getAvailableSeats();
//                    dtm.addRow(row);
//                }
//            }
//        }

        for(Airliner airliner:travelAgency.getAirlinerDirectory().getAirlinerList()) {
            int i=0;
            int count = 0;
            for(Flight flight:airliner.getFlightList()) {
            
            if(airliner.getAirlinerName().equals(flight.getAirlinerName())){
            Object[] row = new Object[8];
            row[0]=airliner.getAirlinerName();
            row[1]=flight;
            row[2]=airliner.getFlightList().get(i).getSource();
            row[3]=airliner.getFlightList().get(i).getDestination();
            row[4]=airliner.getFlightList().get(i).getDepartureTime();
            row[5]=airliner.getFlightList().get(i).getArrivalTime();
            row[6]=airliner.getFlightList().get(i).getFlightPrice();
            row[7]=airliner.getFlightList().get(i).getAvailableSeats();
            dtm.addRow(row);
            count++;
            }
            i++;
            }
            airliner.setAirlinerNoOfAirplanes(count);
        }
    }
    
    private void populateComboBox(){
        ArrayList <String> airlinerList = new ArrayList<String>();
        ArrayList <String> sourceList = new ArrayList<String>();
        ArrayList <String> destinationList = new ArrayList<String>();
        for(Airliner airliner:travelAgency.getAirlinerDirectory().getAirlinerList()){
            //int i=0;
            if(!airlinerList.contains(airliner.getAirlinerName())){
                    airlinerList.add(airliner.getAirlinerName());
            }
            for(Flight flight:airliner.getFlightList()) { 
               
                if(!sourceList.contains(flight.getSource())){
                    sourceList.add(flight.getSource());
                }
                if(!destinationList.contains(flight.getDestination())){
                    destinationList.add(flight.getDestination());
                }
                //i++;
            }
        }
        
        Collections.sort(airlinerList); 
        for(String airlinerName : airlinerList){
            jComboBoxAirliner.addItem(airlinerName);
            jComboBoxAirliner.setSelectedIndex(-1);

        }
        Collections.sort(sourceList); 
        for(String distinctSource : sourceList){
            jComboBoxFrom.addItem(distinctSource);
            jComboBoxFrom.setSelectedIndex(-1);

        }
        Collections.sort(destinationList); 
        for(String distinctDestination : destinationList){
            jComboBoxDestination.addItem(distinctDestination);
            jComboBoxDestination.setSelectedIndex(-1);

        }
        
   
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        backBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxFrom = new javax.swing.JComboBox<>();
        jComboBoxDestination = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxTime = new javax.swing.JComboBox<>();
        minPrice = new javax.swing.JTextField();
        maxPrice = new javax.swing.JTextField();
        searchBtn = new java.awt.Button();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSearchFlightList = new javax.swing.JTable();
        bookBtn = new java.awt.Button();
        jLabel7 = new javax.swing.JLabel();
        jComboBoxAirliner = new javax.swing.JComboBox<>();

        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/icons8-back-30.png"))); // NOI18N
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Monotype Corsiva", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Find Your Flights Here!!");

        jLabel2.setText("From*   :");

        jLabel3.setText("TO*  :");

        jComboBoxDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDestinationActionPerformed(evt);
            }
        });

        jLabel4.setText("Min Price :");

        jLabel5.setText("Max Price :");

        jLabel6.setText("Time  :");

        jComboBoxTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Morning", "Afternoon", "Evening", "Night" }));
        jComboBoxTime.setSelectedIndex(-1);
        jComboBoxTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTimeActionPerformed(evt);
            }
        });

        minPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minPriceActionPerformed(evt);
            }
        });

        searchBtn.setActionCommand("searchBtn");
        searchBtn.setLabel("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        tblSearchFlightList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airliner", "Flight Number", "Source", "Destination", "Departure time", "Arrival Time", "Price", "Available Seats"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblSearchFlightList);

        bookBtn.setLabel("Book");
        bookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookBtnActionPerformed(evt);
            }
        });

        jLabel7.setText("Airliner :");

        jComboBoxAirliner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAirlinerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1027, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jComboBoxTime, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jComboBoxAirliner, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jComboBoxFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(minPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(96, 96, 96)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(maxPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jComboBoxDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(bookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxTime, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxAirliner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1051, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 699, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout)panel.getLayout();
        panel.remove(this);
        layout.previous(panel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void jComboBoxDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDestinationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxDestinationActionPerformed

    private void jComboBoxTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxTimeActionPerformed

    private void minPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minPriceActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        String from = (String)jComboBoxFrom.getSelectedItem();
        String destination =(String)jComboBoxDestination.getSelectedItem();
        String airlinerName =(String)jComboBoxAirliner.getSelectedItem();
        try{
            if(from == null){
                throw new RuntimeException("Please Select From!!!");
            }
        }catch(RuntimeException e){
            JOptionPane.showMessageDialog(null, e.getMessage());
            jComboBoxFrom.setSelectedIndex(-1);
            return;
        }
        try{
            if(destination == null){
                throw new RuntimeException("Please Select Destination!!!");
            }
        }catch(RuntimeException e){
            JOptionPane.showMessageDialog(null, e.getMessage());
            jComboBoxDestination.setSelectedIndex(-1);
            return;
        }

        double minPrice;
        double maxPrice;
        if(this.minPrice.getText().equals("") && this.maxPrice.getText().equals("")){
            minPrice = 0.0;
            maxPrice = 0.0;
        }else if(this.minPrice.getText().equals("")){
            minPrice = 0.0;
            maxPrice = Double.parseDouble(this.maxPrice.getText());
        }else if(this.maxPrice.getText().equals("")){
            maxPrice = 0.0;
            minPrice = Double.parseDouble(this.minPrice.getText());
        }else{
            minPrice = Double.parseDouble(this.minPrice.getText());
            maxPrice = Double.parseDouble(this.maxPrice.getText());
        }
        String time =(String)jComboBoxTime.getSelectedItem();
        try{
            if(time == null){
                time="NO";
            }
        }catch(Exception e){

        }
        int timeMin =0;
        int timeMax =0;

        if(time.length()>0 || time!=null || !time.isEmpty() || !time.equalsIgnoreCase("null")){

            if(time.equalsIgnoreCase("Morning")){
                timeMin = 6;
                timeMax =12;

            }else if(time.equalsIgnoreCase("Afternoon")){
                timeMin = 12;
                timeMax =18;

            }else if(time.equalsIgnoreCase("Evening")){
                timeMin = 18;
                timeMax =24;

            }else if(time.equalsIgnoreCase("Night")){
                timeMin =0;
                timeMax =6;

            }
        }

        DefaultTableModel dtm = (DefaultTableModel) tblSearchFlightList.getModel();

        dtm.setRowCount(0);
        for(Airliner airliner : travelAgency.getAirlinerDirectory().getAirlinerList()){

            for(Flight flight : airliner.getFlightList()){
                if(flight.getAirlinerName().equals(airliner.getAirlinerName())){
                    if(flight.getSource().equalsIgnoreCase(from) && flight.getDestination().equalsIgnoreCase(destination)){
                        if(minPrice>0 && maxPrice>0){
                            if(flight.getAirlinerName().equalsIgnoreCase(airlinerName) &&
                                flight.getFlightPrice() > minPrice && flight.getFlightPrice() < maxPrice && !time.equals("NO")){
                                if(Integer.parseInt(flight.getDepartureTime().substring(0,2))>= timeMin && Integer.parseInt(flight.getDepartureTime().substring(0,2))<=timeMax ){
                                    Object[] row = new Object[8];
                                    row[0] = flight;
                                    row[1] = flight.getFlightNumber();
                                    row[2] = flight.getSource();
                                    row[3] = flight.getDestination();
                                    row[4] = flight.getDepartureTime();
                                    row[5] = flight.getArrivalTime();
                                    row[6] = flight.getFlightPrice();
                                    row[7] = flight.getAvailableSeats();
                                    dtm.addRow(row);
                                }
                            }else if(flight.getAirlinerName().equalsIgnoreCase(airlinerName) &&
                                flight.getFlightPrice() > minPrice && flight.getFlightPrice() < maxPrice && time.equals("NO")){
                                Object[] row = new Object[8];
                                row[0] = flight;
                                row[1] = flight.getFlightNumber();
                                row[2] = flight.getSource();
                                row[3] = flight.getDestination();
                                row[4] = flight.getDepartureTime();
                                row[5] = flight.getArrivalTime();
                                row[6] = flight.getFlightPrice();
                                row[7] = flight.getAvailableSeats();
                                dtm.addRow(row);
                            }else if(!flight.getAirlinerName().equalsIgnoreCase(airlinerName) && flight.getFlightPrice() > minPrice && flight.getFlightPrice() < maxPrice && !time.equals("NO")){
                                if(Integer.parseInt(flight.getDepartureTime().substring(0,2))>= timeMin && Integer.parseInt(flight.getDepartureTime().substring(0,2))<=timeMax ){
                                    Object[] row = new Object[8];
                                    row[0] = flight;
                                    row[1] = flight.getFlightNumber();
                                    row[2] = flight.getSource();
                                    row[3] = flight.getDestination();
                                    row[4] = flight.getDepartureTime();
                                    row[5] = flight.getArrivalTime();
                                    row[6] = flight.getFlightPrice();
                                    row[7] = flight.getAvailableSeats();
                                    dtm.addRow(row);
                                }
                            }else if(flight.getFlightPrice() > minPrice && flight.getFlightPrice() < maxPrice && !flight.getAirlinerName().equalsIgnoreCase(airlinerName)  && time.equals("NO")){
                                Object[] row = new Object[8];
                                row[0] = flight;
                                row[1] = flight.getFlightNumber();
                                row[2] = flight.getSource();
                                row[3] = flight.getDestination();
                                row[4] = flight.getDepartureTime();
                                row[5] = flight.getArrivalTime();
                                row[6] = flight.getFlightPrice();
                                row[7] = flight.getAvailableSeats();
                                dtm.addRow(row);
                            }
                        }else if(minPrice>0){
                            if(flight.getAirlinerName().equalsIgnoreCase(airlinerName) &&
                                flight.getFlightPrice() > minPrice && !time.equals("NO")){
                                if(Integer.parseInt(flight.getDepartureTime().substring(0,2))>= timeMin && Integer.parseInt(flight.getDepartureTime().substring(0,2))<=timeMax ){
                                    Object[] row = new Object[8];
                                    row[0] = flight;
                                    row[1] = flight.getFlightNumber();
                                    row[2] = flight.getSource();
                                    row[3] = flight.getDestination();
                                    row[4] = flight.getDepartureTime();
                                    row[5] = flight.getArrivalTime();
                                    row[6] = flight.getFlightPrice();
                                    row[7] = flight.getAvailableSeats();
                                    dtm.addRow(row);
                                }
                            }else if(flight.getAirlinerName().equalsIgnoreCase(airlinerName) &&
                                flight.getFlightPrice() > minPrice && time.equals("NO")){
                                Object[] row = new Object[8];
                                row[0] = flight;
                                row[1] = flight.getFlightNumber();
                                row[2] = flight.getSource();
                                row[3] = flight.getDestination();
                                row[4] = flight.getDepartureTime();
                                row[5] = flight.getArrivalTime();
                                row[6] = flight.getFlightPrice();
                                row[7] = flight.getAvailableSeats();
                                dtm.addRow(row);
                            }else if(flight.getFlightPrice() > minPrice && !time.equals("NO") && !flight.getAirlinerName().equalsIgnoreCase(airlinerName)){
                                if(Integer.parseInt(flight.getDepartureTime().substring(0,2))>= timeMin && Integer.parseInt(flight.getDepartureTime().substring(0,2))<=timeMax ){
                                    Object[] row = new Object[8];
                                    row[0] = flight;
                                    row[1] = flight.getFlightNumber();
                                    row[2] = flight.getSource();
                                    row[3] = flight.getDestination();
                                    row[4] = flight.getDepartureTime();
                                    row[5] = flight.getArrivalTime();
                                    row[6] = flight.getFlightPrice();
                                    row[7] = flight.getAvailableSeats();
                                    dtm.addRow(row);
                                }
                            }else if(flight.getFlightPrice() > minPrice && time.equals("NO") && !flight.getAirlinerName().equalsIgnoreCase(airlinerName)){
                                Object[] row = new Object[8];
                                row[0] = flight;
                                row[1] = flight.getFlightNumber();
                                row[2] = flight.getSource();
                                row[3] = flight.getDestination();
                                row[4] = flight.getDepartureTime();
                                row[5] = flight.getArrivalTime();
                                row[6] = flight.getFlightPrice();
                                row[7] = flight.getAvailableSeats();
                                dtm.addRow(row);
                            }
                        }else if(maxPrice>0){
                            if(flight.getAirlinerName().equalsIgnoreCase(airlinerName) && flight.getFlightPrice() < maxPrice && !time.equals("NO")){
                                if(Integer.parseInt(flight.getDepartureTime().substring(0,2))>= timeMin && Integer.parseInt(flight.getDepartureTime().substring(0,2))<=timeMax ){
                                    Object[] row = new Object[8];
                                    row[0] = flight;
                                    row[1] = flight.getFlightNumber();
                                    row[2] = flight.getSource();
                                    row[3] = flight.getDestination();
                                    row[4] = flight.getDepartureTime();
                                    row[5] = flight.getArrivalTime();
                                    row[6] = flight.getFlightPrice();
                                    row[7] = flight.getAvailableSeats();
                                    dtm.addRow(row);
                                }
                            }else if(flight.getAirlinerName().equalsIgnoreCase(airlinerName) &&
                                flight.getFlightPrice() < maxPrice && time.equals("NO")){
                                Object[] row = new Object[8];
                                row[0] = flight;
                                row[1] = flight.getFlightNumber();
                                row[2] = flight.getSource();
                                row[3] = flight.getDestination();
                                row[4] = flight.getDepartureTime();
                                row[5] = flight.getArrivalTime();
                                row[6] = flight.getFlightPrice();
                                row[7] = flight.getAvailableSeats();
                                dtm.addRow(row);
                            }else if(flight.getFlightPrice() < maxPrice && !time.equals("NO") && !flight.getAirlinerName().equalsIgnoreCase(airlinerName) ){
                                if(Integer.parseInt(flight.getDepartureTime().substring(0,2))>= timeMin && Integer.parseInt(flight.getDepartureTime().substring(0,2))<=timeMax ){
                                    Object[] row = new Object[8];
                                    row[0] = flight;
                                    row[1] = flight.getFlightNumber();
                                    row[2] = flight.getSource();
                                    row[3] = flight.getDestination();
                                    row[4] = flight.getDepartureTime();
                                    row[5] = flight.getArrivalTime();
                                    row[6] = flight.getFlightPrice();
                                    row[7] = flight.getAvailableSeats();
                                    dtm.addRow(row);
                                }
                            }else if(flight.getFlightPrice() < maxPrice && time.equals("NO") && !flight.getAirlinerName().equalsIgnoreCase(airlinerName)){
                                Object[] row = new Object[8];
                                row[0] = flight;
                                row[1] = flight.getFlightNumber();
                                row[2] = flight.getSource();
                                row[3] = flight.getDestination();
                                row[4] = flight.getDepartureTime();
                                row[5] = flight.getArrivalTime();
                                row[6] = flight.getFlightPrice();
                                row[7] = flight.getAvailableSeats();
                                dtm.addRow(row);
                            }
                        }else if(flight.getAirlinerName().equalsIgnoreCase(airlinerName)){
                            if(!time.equals("NO")){
                                if(Integer.parseInt(flight.getDepartureTime().substring(0,2))>= timeMin && Integer.parseInt(flight.getDepartureTime().substring(0,2))<=timeMax ){
                                    Object[] row = new Object[8];
                                    row[0] = flight;
                                    row[1] = flight.getFlightNumber();
                                    row[2] = flight.getSource();
                                    row[3] = flight.getDestination();
                                    row[4] = flight.getDepartureTime();
                                    row[5] = flight.getArrivalTime();
                                    row[6] = flight.getFlightPrice();
                                    row[7] = flight.getAvailableSeats();
                                    dtm.addRow(row);
                                }
                            }else{
                                Object[] row = new Object[8];
                                row[0] = flight;
                                row[1] = flight.getFlightNumber();
                                row[2] = flight.getSource();
                                row[3] = flight.getDestination();
                                row[4] = flight.getDepartureTime();
                                row[5] = flight.getArrivalTime();
                                row[6] = flight.getFlightPrice();
                                row[7] = flight.getAvailableSeats();
                            }
                        }else if(time.equals("NO")){
                            Object[] row = new Object[8];
                            row[0] = flight;
                            row[1] = flight.getFlightNumber();
                            row[2] = flight.getSource();
                            row[3] = flight.getDestination();
                            row[4] = flight.getDepartureTime();
                            row[5] = flight.getArrivalTime();
                            row[6] = flight.getFlightPrice();
                            row[7] = flight.getAvailableSeats();
                            dtm.addRow(row);
                        }else{
                            if(Integer.parseInt(flight.getDepartureTime().substring(0,2))>= timeMin && Integer.parseInt(flight.getDepartureTime().substring(0,2))<=timeMax ){
                                Object[] row = new Object[8];
                                row[0] = flight;
                                row[1] = flight.getFlightNumber();
                                row[2] = flight.getSource();
                                row[3] = flight.getDestination();
                                row[4] = flight.getDepartureTime();
                                row[5] = flight.getArrivalTime();
                                row[6] = flight.getFlightPrice();
                                row[7] = flight.getAvailableSeats();
                                dtm.addRow(row);
                            }
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_searchBtnActionPerformed

    private void bookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblSearchFlightList.getSelectedRow();
        int numbersOfRows = tblSearchFlightList.getSelectedRowCount();
        if(numbersOfRows<=0) {
            JOptionPane.showMessageDialog(null, "Please select a row from table first to view flight details","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else if(numbersOfRows>1){
            JOptionPane.showMessageDialog(null, "You are not allowed to book more than one flight!!!"+"\n"+"Please Select only one flight that you want to book!!!","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{
            Flight flight = (Flight)tblSearchFlightList.getValueAt(selectedRow, 1);
            BookFlightJPanel jPanel = new BookFlightJPanel(panel,flight,travelAgency);
            panel.add("BookFlight",jPanel);
            CardLayout layout = (CardLayout) panel.getLayout();
            layout.next(panel);
        }
    }//GEN-LAST:event_bookBtnActionPerformed

    private void jComboBoxAirlinerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAirlinerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxAirlinerActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private java.awt.Button bookBtn;
    private javax.swing.JComboBox<String> jComboBoxAirliner;
    private javax.swing.JComboBox<String> jComboBoxDestination;
    private javax.swing.JComboBox<String> jComboBoxFrom;
    private javax.swing.JComboBox<String> jComboBoxTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField maxPrice;
    private javax.swing.JTextField minPrice;
    private java.awt.Button searchBtn;
    private javax.swing.JTable tblSearchFlightList;
    // End of variables declaration//GEN-END:variables
}
